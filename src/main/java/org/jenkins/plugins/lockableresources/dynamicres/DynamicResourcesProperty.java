/*
 * The MIT License
 *
 * Dynamic resources management by Darius Mihai (mihai_darius22@yahoo.com)
 * Copyright (C) 2015 Freescale Semiconductor, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.jenkins.plugins.lockableresources.dynamicres;

import hudson.Extension;
import hudson.Util;
import hudson.model.Job;
import hudson.model.JobProperty;
import hudson.model.JobPropertyDescriptor;
import hudson.util.FormValidation;
import net.sf.json.JSONObject;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.StaplerRequest;

public class DynamicResourcesProperty extends JobProperty<Job<?, ?>> {
	/** The name of a unique variable that will be used as a token when creating
	 *  dynamic resources configurations
	 */
	private final String injectedId;
	/* True if this job should generate resources for another job with the same matrix configuration */
	private final Boolean createDynamicResources;
	/* True if this job should consume resources generated by another job with the same matrix configuration */
	private final Boolean consumeDynamicResources;
	/** The names of the matrix configuration axis that should be ignored when generating
	 *  dynamic resources configurations
	 */
	private final String ignoredAxis;
	/* The job(s) that should consume the dynamic resources created by this job */
	private final String generatedForJobs;

	@DataBoundConstructor
	public DynamicResourcesProperty(String injectedId,
									Boolean createDynamicResources,
									Boolean consumeDynamicResources,
									String ignoredAxis,
									String generatedForJobs) {
		super();
		this.injectedId = injectedId;
		this.createDynamicResources = createDynamicResources;
		this.consumeDynamicResources = consumeDynamicResources;
		this.ignoredAxis = ignoredAxis;
		this.generatedForJobs = generatedForJobs;
	}

	/**
	 * @return The name of the environment variable that will be used as a unique token
	 * when creating dynamic resources configurations
	 */
	public String getInjectedId() {
		return injectedId;
	}

	/**
	 * @return True if this job should create dynamic resources
	 */
	public Boolean getCreateDynamicResources() {
		return createDynamicResources;
	}

	/**
	 * @return True if this job should consume dynamic resources
	 */
	public Boolean getConsumeDynamicResources() {
		return consumeDynamicResources;
	}

	/**
	 * @return A string containing the names of the axis in the matrix configuration
	 * that should be ignored when generating dynamic resources configurations
	 */
	public String getIgnoredAxis() {
		return ignoredAxis;
	}

	/**
	 * @return A string containing the names of the jobs that should use the
	 * dynamic resources generated by this job
	 */
	public String getGeneratedForJobs() {
		return generatedForJobs;
	}

	@Extension
	public static class DescriptorImpl extends JobPropertyDescriptor {

		@Override
		public String getDisplayName() {
			return "Dynamic Resources Config";
		}

		/**
		 * Creates a new instance based on the form created using the job configuration page
		 * @param req
		 * @param formData
		 * @return A new DynamicResourcesProperty with the data in the form
		 * @throws hudson.model.Descriptor.FormException
		 */
		@Override
		public DynamicResourcesProperty newInstance(StaplerRequest req,
													JSONObject formData)
				throws FormException {

			if (formData.isNullObject())
				return null;

			JSONObject json = formData.getJSONObject("dynamic-resources-prop");
			if (json.isNullObject())
				return null;

			String injectedId = Util.fixEmptyAndTrim(json.getString("injectedId"));
			Boolean createDynamicResources = json.getBoolean("createDynamicResources");
			Boolean consumeDynamicResources = json.getBoolean("consumeDynamicResources");
			String ignoredAxis = Util.fixEmptyAndTrim(json.getString("ignoredAxis"));
			String generatedForJobs = Util.fixEmptyAndTrim(json.getString("generatedForJobs"));

			if (consumeDynamicResources == false && createDynamicResources == false)
				return null;

			return new DynamicResourcesProperty(injectedId,
												createDynamicResources,
												consumeDynamicResources,
												ignoredAxis,
												generatedForJobs);
		}

		/**
		 * Verify if the 'injectedId' field has a correct format. If the job should either create or consume
		 * dynamic resources, the injectedId should be a non empty string.
		 * @param value The value of the 'injectedId' field
		 * @param createDynamicResources Whether the job should create dynamic resources
		 * @param consumeDynamicResources Whether the job should consume dynamic resources
		 * @return OK if the definition is acceptable, or an error otherwise
		 */
		public FormValidation doCheckInjectedId(@QueryParameter String value,
												@QueryParameter Boolean createDynamicResources,
												@QueryParameter Boolean consumeDynamicResources) {

			String injectedId = Util.fixEmptyAndTrim(value);
			if (injectedId == null && !createDynamicResources && !consumeDynamicResources)
				return FormValidation.ok();

			if (injectedId != null && !injectedId.isEmpty())
				return FormValidation.ok();

			return FormValidation.error("Injected parameter id must be defined.");
		}

		/**
		 * Verify if the 'generatedForJobs' field has a correct format. If the job should create
		 * dynamic resources, the field should be a non empty string.
		 * @param value The value of the 'generatedForJobs' field
		 * @param createDynamicResources Whether the job should create dynamic resources
		 * @return OK if the definition is acceptable, or an error otherwise
		 */
		public FormValidation doCheckGeneratedForJobs(@QueryParameter String value,
													  @QueryParameter Boolean createDynamicResources) {

			String generatedForJobs = Util.fixEmptyAndTrim(value);
			if (generatedForJobs == null && !createDynamicResources)
				return FormValidation.ok();

			if (generatedForJobs != null && !generatedForJobs.isEmpty())
				return FormValidation.ok();

			return FormValidation.error("The created dynamic resources must be reserved for a job.");
		}
	}
}
